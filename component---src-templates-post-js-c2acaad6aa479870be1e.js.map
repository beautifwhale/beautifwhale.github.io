{"version":3,"sources":["webpack:///./src/components/Bio.js","webpack:///./src/templates/Post.js"],"names":["bioQuery","Header","query","render","data","author","site","siteMetadata","style","display","alignItems","marginBottom","rhythm","fixed","avatar","childImageSharp","alt","marginRight","minWidth","borderRadius","imgStyle","to","textDecoration","color","BlogPostTemplate","post","this","props","markdownRemark","siteTitle","title","pageContext","previous","next","banner","bannerSrc","fluid","src","Layout","location","frontmatter","description","excerpt","image","textAlign","scale","marginTop","date","fields","readingTime","text","imageAltText","bannerCredit","dangerouslySetInnerHTML","__html","html","Bio","flexWrap","justifyContent","listStyle","padding","slug","rel","React","Component","pageQuery"],"mappings":"4MAoDMA,EAAQ,aAiBCC,EA/DA,WACb,OACE,kBAAC,cAAD,CACEC,MAAOF,EACPG,OAAQ,SAAAC,GAAS,IACPC,EAAWD,EAAKE,KAAKC,aAArBF,OAER,OACE,yBACEG,MAAO,CACLC,QAAS,OACTC,WAAY,SACZC,aAAcC,YAAO,KAGvB,kBAAC,IAAD,CACEC,MAAOT,EAAKU,OAAOC,gBAAgBF,MACnCG,IAAKX,EACLG,MAAO,CACLS,YAAaL,YAAO,IACpBD,aAAc,EACdO,SAAU,GACVC,aAAa,QAEfC,SAAU,CACRD,aAAa,SAIjB,kBAAC,OAAD,CACEE,GAAG,IACHb,MAAO,CACLc,eAAgB,OAChBC,MAAO,YAGT,gCAASlB,GAPX,0FA3BR,U,sECCEmB,E,gLACJrB,OAAA,WACE,IAAMsB,EAAOC,KAAKC,MAAMvB,KAAKwB,eACvBC,EAAYH,KAAKC,MAAMvB,KAAKE,KAAKC,aAAauB,MAF7C,EAGoBJ,KAAKC,MAAMI,YAA9BC,EAHD,EAGCA,SAAUC,EAHX,EAGWA,KACVC,EAAWR,KAAKC,MAAMvB,KAAtB8B,OAEFC,EAAYD,GAAUA,EAAOnB,gBAAgBqB,MAAMC,IACzD,OACE,kBAACC,EAAA,EAAD,CAAQC,SAAUb,KAAKC,MAAMY,SAAUT,MAAOD,GAC5C,kBAAC,IAAD,CACEC,MAAOL,EAAKe,YAAYV,MACxBW,YAAahB,EAAKiB,QAClBC,MAAOR,IAET,yBACE3B,MAAO,CACLoC,UAAW,WAGb,4BAAKnB,EAAKe,YAAYV,OACtB,uBACEtB,MAAK,iBACAqC,aAAM,IADN,CAEHpC,QAAQ,QACRE,aAAcC,YAAO,GACrBkC,UAAWlC,aAAQ,MAGpBa,EAAKe,YAAYO,KARpB,MAQ6BtB,EAAKuB,OAAOC,YAAYC,OAItDhB,GACC,6BACE,kBAAC,IAAD,CACEE,MAAOF,EAAOnB,gBAAgBqB,MAC9BpB,IAAKS,EAAKe,YAAYW,eAEvB1B,EAAKe,YAAYY,cAItB,6BAEA,yBAAKC,wBAAyB,CAAEC,OAAQ7B,EAAK8B,QAC7C,wBACE/C,MAAO,CACLG,aAAcC,YAAO,GACrBkC,UAAWlC,YAAO,MAGtB,kBAAC4C,EAAD,MAEA,wBACEhD,MAAO,CACLC,QAAQ,OACRgD,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACG5B,GACC,kBAAC,OAAD,CAAMX,GAAIW,EAASgB,OAAOa,KAAMC,IAAI,QAApC,KACK9B,EAASQ,YAAYV,QAI9B,4BACGG,GACC,kBAAC,OAAD,CAAMZ,GAAIY,EAAKe,OAAOa,KAAMC,IAAI,QAC7B7B,EAAKO,YAAYV,MADpB,U,GAxEiBiC,IAAMC,WAqFxBC,GAFEzC,YAEO","file":"component---src-templates-post-js-c2acaad6aa479870be1e.js","sourcesContent":["import React from 'react'\nimport { StaticQuery, graphql, Link } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport { rhythm } from '../utils/typography'\n\nconst Header = () => {\n  return (\n    <StaticQuery\n      query={bioQuery}\n      render={data => {\n        const { author } = data.site.siteMetadata\n\n        return (\n          <div\n            style={{\n              display: 'flex',\n              alignItems: 'center',\n              marginBottom: rhythm(1),\n            }}\n          >\n            <Image\n              fixed={data.avatar.childImageSharp.fixed}\n              alt={author}\n              style={{\n                marginRight: rhythm(1 / 2),\n                marginBottom: 0,\n                minWidth: 50,\n                borderRadius: `100%`,\n              }}\n              imgStyle={{\n                borderRadius: `50%`,\n              }}\n            />\n\n            <Link\n              to=\"/\"\n              style={{\n                textDecoration: 'none',\n                color: 'inherit',\n              }}\n            >\n              <strong>{author}</strong> is a Software Engineer, interested in\n              UX/DX, Product Development, and Storytelling.\n            </Link>\n          </div>\n        )\n      }}\n    />\n  )\n}\n\nconst bioQuery = graphql`\n  query {\n    avatar: file(absolutePath: { regex: \"/profile_cropped.png/\" }) {\n      childImageSharp {\n        fixed(width: 50, height: 50) {\n          ...GatsbyImageSharpFixed\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        author\n      }\n    }\n  }\n`\n\nexport default Header\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport Image from 'gatsby-image'\n\nimport Bio from '../components/Bio'\nimport Layout from '../components/Layout'\nimport SEO from '../components/seo'\nimport { rhythm, scale } from '../utils/typography'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n    const siteTitle = this.props.data.site.siteMetadata.title\n    const { previous, next } = this.props.pageContext\n    const { banner } = this.props.data\n\n    const bannerSrc = banner && banner.childImageSharp.fluid.src\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO\n          title={post.frontmatter.title}\n          description={post.excerpt}\n          image={bannerSrc}\n        />\n        <div\n          style={{\n            textAlign: 'center',\n          }}\n        >\n          <h1>{post.frontmatter.title}</h1>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n              marginTop: rhythm(-1),\n            }}\n          >\n            {post.frontmatter.date} ☕ {post.fields.readingTime.text}\n          </p>\n        </div>\n\n        {banner && (\n          <div>\n            <Image\n              fluid={banner.childImageSharp.fluid}\n              alt={post.frontmatter.imageAltText}\n            />\n            {post.frontmatter.bannerCredit}\n          </div>\n        )}\n\n        <br />\n\n        <div dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n            marginTop: rhythm(1),\n          }}\n        />\n        <Bio />\n\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    banner: file(absolutePath: { regex: \"/banner.jpg/\" }) {\n      childImageSharp {\n        fluid(maxWidth: 720, quality: 100) {\n          ...GatsbyImageSharpFluid\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 250)\n      html\n      frontmatter {\n        title\n        category\n        date(formatString: \"DD MMMM YYYY\")\n        bannerCredit\n        imageAltText\n      }\n      fields {\n        readingTime {\n          text\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}