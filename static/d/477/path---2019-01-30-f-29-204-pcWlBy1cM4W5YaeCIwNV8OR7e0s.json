{"data":{"site":{"siteMetadata":{"title":"@Beautifwhale üêã","author":"Daith√≠"}},"markdownRemark":{"id":"15e89c8f-7a29-572e-a26f-c83b4c5a531a","excerpt":"Why is overriding the Object.equals() and Object.hashcode() methods important when using Hashtables, HashSets, and HashMaps in Java? When using  ,  , or   in‚Ä¶","html":"<blockquote>\n<p>Why is overriding the Object.equals() and Object.hashcode() methods important when using Hashtables, HashSets, and HashMaps in Java?</p>\n</blockquote>\n<p>When using <code class=\"language-text\">Hashtable</code>, <code class=\"language-text\">Hashset</code>, or <code class=\"language-text\">HashMap</code> in Java <code class=\"language-text\">equals()</code> and/or\n<code class=\"language-text\">hashcode()</code> are called during a comparison depending on the context and data structure used.</p>\n<p>For example using a <code class=\"language-text\">Hashset</code> to store students. We want to leverage the functionality of a <code class=\"language-text\">Hashset</code> to only allow unique objects to be stored, no duplicates.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>HashSet<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> String id<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> String email<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>String id<span class=\"token punctuation\">,</span> String name<span class=\"token punctuation\">,</span> String email<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>email <span class=\"token operator\">=</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"HashCode \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" Student{\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"id='\"</span> <span class=\"token operator\">+</span> id <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\", name='\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\", email='\"</span> <span class=\"token operator\">+</span> email <span class=\"token operator\">+</span> <span class=\"token string\">'\\''</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\", age=\"</span> <span class=\"token operator\">+</span> age <span class=\"token operator\">+</span>\n        <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Student student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Donald\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"donaldtrump@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Student student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Donald\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"donaldtrump@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Student student3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"888\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"peterpan@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    HashSet<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">></span></span> setStudents <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    setStudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    setStudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    setStudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    setStudents<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can see here that we have two identical <code class=\"language-text\">Student</code> objects, Donald, in terms of their\ncontents. We do not want to store both of these objects, only one is required.\nBut if we print out the contents of the set.</p>\n<p>The output to the console is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HashCode 1580066828 Student{id=&#39;111&#39;, name=&#39;Donald&#39;, email=&#39;donaldtrump@gmail.com&#39;, age=60}\nHashCode 1625635731 Student{id=&#39;111&#39;, name=&#39;Donald&#39;, email=&#39;donaldtrump@gmail.com&#39;, age=60}\nHashCode 491044090 Student{id=&#39;888&#39;, name=&#39;Peter&#39;, email=&#39;peterpan@gmail.com&#39;, age=12}</code></pre></div>\n<p>You can see that Donald was added to the set twice even though they have exactly\nthe same contents. The reason this happens is because a <code class=\"language-text\">HashSet</code> stores objects\ninto buckets.</p>\n<p>‚Ä¶</p>\n<p><img src=\"https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif\" alt=\"Cat\"></p>","frontmatter":{"title":"Hashtables, HashSets, and HashMaps in Java","category":"coding, java","date":"January 30, 2019"}}},"pageContext":{"slug":"/2019-01-30/","previous":{"fields":{"slug":"/2019-01-31/"},"frontmatter":{"title":"Hashtables, HashSets, and HashMaps in Java"}},"next":null}}