{"data":{"site":{"siteMetadata":{"title":"@Beautifwhale","author":"Daith√≠ üêã "}},"markdownRemark":{"id":"15e89c8f-7a29-572e-a26f-c83b4c5a531a","excerpt":"I was recently asked this question in an interview: Why is overriding the equals() and hashcode() methods on your class important when using Collections? At‚Ä¶","html":"<p>I was recently asked this question in an interview:</p>\n<blockquote>\n<p>Why is overriding the equals() and hashcode() methods on your class important when using Collections?</p>\n</blockquote>\n<p>At first I didn‚Äôt really understand the question, I was thinking more along the\nlines of how it might be done as opposed to why you would actually do it. I\nstruggled to find the answer they were looking for. I continued to ask more\nquestions hoping to narrow down what the interviewer was looking for exactly. I\ndidn‚Äôt provide a solid answer to the question but I talked through what I was\nthinking and came close, I think.</p>\n<p>In hindsight, and with some additional Googling, I can see\nthat the question was very simple, it was my lack of experience with the\ncontext that was the problem. Curious to know the answer to the question I did\nsome searching.</p>\n<p>So it turns out the reason why you would override the <code class=\"language-text\">equals()</code> and\n<code class=\"language-text\">hashCode()</code> methods in your class is when using the Java Collections API for\nthings like <code class=\"language-text\">Hashtable</code>, <code class=\"language-text\">Hashset</code>, or <code class=\"language-text\">HashMap</code>. Both of\nthese methods are called depending on the context and data structure used.</p>\n<h1>Hashtables, HashSets, and HashMaps</h1>\n<p>To understand why its critical to override these methods its important to\nunderstand how these collections work at a high level. For example using Set to\nstore <code class=\"language-text\">Student</code> objects. We want to leverage the functionality of a Set to only allow unique objects to be stored, no duplicates.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">Student student1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Donald\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"donaldtrump@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nStudent student2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"111\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Donald\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"donaldtrump@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">60</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nStudent student3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"888\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Peter\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"peterpan@gmail.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSet<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">></span></span> setStudents <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashSet</span><span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Student<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsetStudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsetStudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsetStudents<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can see here that we have two identical <code class=\"language-text\">Student</code> objects in terms of there\ncontents. We do not want to store both of these objects, only one is required.\nUsing the example as it is without overriding <code class=\"language-text\">equals()</code> or <code class=\"language-text\">hashCode()</code> in the\n<code class=\"language-text\">Student</code> the results of a print:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">setStudents<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>student <span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Would be something like (remember to override the <code class=\"language-text\">toString()</code> method to control\nyour print output):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Student 111 Donald donaldtrump@gmail.com 60\nStudent 111 Donald donaldtrump@gmail.com 60\nStudent 888 Peter peterpan@gmail.com 12</code></pre></div>\n<p>Wait what? why is there two entries for Donald? I‚Äôm using a HashSet only one Object should have been stored.</p>\n<p>‚Ä¶</p>\n<p><img src=\"https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif\" alt=\"Cat\"></p>","frontmatter":{"title":"Java Object equals() and hashcode() methods","category":"coding, java","date":"January 30, 2019"}}},"pageContext":{"slug":"/2019-01-30/","previous":null,"next":null}}